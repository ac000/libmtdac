.TH libmtdac_mtd.h 3 "January 7, 2021" "libmtdac 0.17.0" "libmtdac_mtd.h"

.SH NAME
libmtdac_mtd.h \- Core types / defines

.SH SYNOPSIS
.B #include <libmtdac/mtd.h>

.SH DESCRIPTION
This header file contains the main types and defines. It is not generally
required to directly include this as it will be included by the individual
endpoint API header files.

.SH DATA STRUCTURES
The following types, enums and constants are defined

.SH Library version
#define \fBLIBMTDAC_MAJOR_VERSION\fP
.br
#define \fBLIBMTDAC_MINOR_VERSION\fP
.br
#define \fBLIBMTDAC_MICRO_VERSION\fP

.RS
These are integers that contain the library version.
.RE

.SH Log level
#define \fBMTD_OPT_LOG_ERR\fP
.br
#define \fBMTD_OPT_LOG_INFO\fP
.br
#define \fBMTD_OPT_LOG_DEBUG\fP

.RS
These set the desired log level. Defaults to \fBMTD_OPT_LOG_ERR\fP
.RE

.SH Options

#define \fBMTD_OPT_ACT_MOBILE_APP_DIRECT\fP
.br
#define \fBMTD_OPT_ACT_DESKTOP_APP_DIRECT\fP
.br
#define \fBMTD_OPT_ACT_MOBILE_APP_VIA_SERVER\fP
.br
#define \fBMTD_OPT_ACT_DESKTOP_APP_VIA_SERVER\fP
.br
#define \fBMTD_OPT_ACT_WEB_APP_VIA_SERVER\fP
.br
#define \fBMTD_OPT_ACT_BATCH_PROCESS_DIRECT\fP
.br
#define \fBMTD_OPT_ACT_OTHER_DIRECT\fP
.br
#define \fBMTD_OPT_ACT_OTHER_VIA_SERVER\fP

.RS
These set the application connection method. \fBOne\fP of these should be set.
.RE

#define \fBMTD_OPT_GLOBAL_INIT\fP

.RS
Can be passed to \fBmtd_init()\fP, in single threaded applications, instead of
calling \fBmtd_global_init()\fP
.RE

#define \fBMTD_OPT_NO_ANTI_FRAUD_HDRS\fP

.RS
This disables the sending of Fraud Preention Headers.
.RE

#define \fBMTD_OPT_PRODUCTION_API\fP

.RS
By default libmtdac uses the \fBtest\fP API. Setting this will make it use the
\fBproduction\fP API.
.RE

.SH Errors

enum mtd_error {
        \fBMTD_ERR_NONE\fP,
        \fBMTD_ERR_OS\fP,
        \fBMTD_ERR_REQUEST\fP,
        \fBMTD_ERR_CURL\fP,
        \fBMTD_ERR_NEEDS_AUTHORISATION\fP,
        \fBMTD_ERR_UNKNOWN_FLAGS\fP,
        \fBMTD_ERR_LIB_TOO_OLD\fP,
        \fBMTD_ERR_CONFIG_DIR_UNSPEC\fP,
        \fBMTD_ERR_CONFIG_DIR_INVALID\fP,
        \fBMTD_ERR_INVALID_ERROR\fP
.br
};

.SH Data Source

For requests that send (POST/PUT) data to an endpoint, the source for this data
is defined via the following interface

enum mtd_data_src_type {
        \fBMTD_DATA_SRC_FILE\fP,
        \fBMTD_DATA_SRC_BUF\fP,
        \fBMTD_DATA_SRC_FP\fP,
        \fBMTD_DATA_SRC_FD\fP,
.br
};

typedef union mtd_data_src {
        const void *buf;
        const char *file;
        FILE       *fp;
        int         fd;
.br
} mtd_data_src_t;

struct mtd_dsrc_ctx {
        mtd_data_src_t         data_src;
        size_t                 data_len;

        enum mtd_data_src_type src_type;
.br
};

You define a \fIstruct mtd_dsrc_ctx\fP and set \fIdata_src\fP to either a
buffer that contains the data, a filename of a file containing the data, a
stdio \fIFILE *\fP pointer or a file descriptor of an already opened file
containing the data to send.

You then set \fIsrc_type\fP to the appropriate \fIenum mtd_data_src_type\fP
value.

In the case of using a buffer you also need to set the length in bytes of the
data in the buffer via \fIdata_len\fP.

.SH Fraud Prevention Headers

This can be used to override the inbuilt functions that set the various fraud
prevention headers. Any or all of them can bet set, any that left as NULL will
cause the appropriate inbuilt function to be used

.nf
#define \fBMTD_FPH_SET_FUNC(s, m, f)\p
.ni
.P
#define \fBMTD_FPH_CLI_PUBLIC_IP\fP               fph_srcip
.br
#define \fBMTD_FPH_CLI_PUBLIC_PORT\fP             fph_srcport
.br
#define \fBMTD_FPH_CLI_DEV_ID\fP                  fph_device_id
.br
#define \fBMTD_FPH_CLI_USER_ID\fP                 fph_user
.br
#define \fBMTD_FPH_CLI_TZ\fP                      fph_tz
.br
#define \fBMTD_FPH_CLI_LOCAL_IPS\fP               fph_ipaddrs
.br
#define \fBMTD_FPH_CLI_MAC_ADDRS\fP               fph_macaddrs
.br
#define \fBMTD_FPH_CLI_UA\fP                      fph_ua
.br
#define \fBMTD_FPH_CLI_MULTI_FACTOR\fP            fph_multi_factor
.br
#define \fBMTD_FPH_CLI_SCREENS\fP                 fph_screens
.br
#define \fBMTD_FPH_CLI_WINDOW_SZ\fP               fph_window_sz
.br
#define \fBMTD_FPH_CLI_BROWSER_PLUGINS\fP         fph_browser_plugins
.br
#define \fBMTD_FPH_CLI_BROWSER_JS_UA\fP           fph_browser_js_ua
.br
#define \fBMTD_FPH_CLI_BROWSER_DNT\fP             fph_browser_dnt
.br
#define \fBMTD_FPH_CLI_LOCAL_IPS_TS\fP            fph_ipaddrs_ts
.br
#define \fBMTD_FPH_CLI_PUBLIC_IP_TS\fP            fph_srcip_ts
.br
#define \fBMTD_FPH_VEN_VERSION\fP                 fph_version
.br
#define \fBMTD_FPH_VEN_VERSION_CLI\fP             fph_version_cli
.br
#define \fBMTD_FPH_VEN_LICENSE_ID\fP              fph_license_id
.br
#define \fBMTD_FPH_VEN_PUBLIC_IP\fP               fph_vendor_ip
.br
#define \fBMTD_FPH_VEN_FWD\fP                     fph_vendor_fwd
.br
#define \fBMTD_FPH_VEN_PROD_NAME\fP               fph_prod_name

struct mtd_fph_ops {
        char *(*fph_device_id)(void);
        char *(*fph_user)(void);
        char *(*fph_tz)(void);
        char *(*fph_ipaddrs)(void);
        char *(*fph_ipaddrs_ts)(void);
        char *(*fph_macaddrs)(void);
        char *(*fph_srcip)(void);
        char *(*fph_srcip_ts)(void);
        char *(*fph_srcport)(void);
        char *(*fph_screens)(void);
        char *(*fph_window_sz)(void);
        char *(*fph_browser_plugins)(void);
        char *(*fph_browser_js_ua)(void);
        char *(*fph_browser_dnt)(void);
        char *(*fph_vendor_ip)(void);
        char *(*fph_vendor_fwd)(void);
        char *(*fph_ua)(void);
        char *(*fph_multi_factor)(void);
        char *(*fph_license_id)(void);
        char *(*fph_prod_name)(void);
        char *(*fph_version)(void);
        char *(*fph_version_cli)(void);
.br
};

.SH Config

This can be used to override/provide some settings. Currently you can use this
to override the fraud prevention header functions as described above. Just
declare a \fBstruct mtd_fph_ops\fP as above and set it in \fBstruct mtd_cfg\fP.
.P
Also you can set extra HTTP headers to be sent, \fBextra_hdrs\fP should point
to a NULL terminated array of character pointers.

Finally, you \fBmust\fP specify the directory that libmtdac will use for its
configuration data via \fBconfig_data\fP.

Typically this would be something like \fB${HOME}/.config/${APP_NAME}\fP.

struct mtd_cfg {
        const struct mtd_fph_ops *fph_ops;
        const char * const       *extra_hdrs;

        const char               *config_dir;
.br
};

.SS Example

.EX
const char *hdrs[2] = { NULL };
const struct mtd_fph_ops fph_ops = {
        .fph_user = my_user,
        .fph_version = my_ver
};
const struct mtd_cfg cfg = {
        .fph_ops = &fph_ops,
        .extra_hdrs = hdrs,
        .config_dir = "/home/foo/.config/mtd-cli"
};

hdrs[0] = getenv("MTD_CLI_HDRS");
err = mtd_init(flags, &cfg);
.EE

You can also use the MTD_FPH_SET_FUNC() macro, e.g

.EX
const char *hdrs[2] = { NULL };
struct mtd_fph_ops fph_ops = { NULL };
const struct mtd_cfg cfg = {
        .fph_ops = &fph_ops,
        .extra_hdrs = hdrs,
        .config_dir = "/home/foo/.config/mtd-cli"
};

MTD_FPH_SET_FUNC(fph_ops, MTD_FPH_CLI_USER_ID, my_user);
MTD_FPH_SET_FUNC(fph_ops, MTD_FPH_VEN_VERSION, my_ver);

hdrs[0] = getenv("MTD_CLI_HDRS");
err = mtd_init(flags, &cfg);
.EE

.SH Functions

.BI "void mtd_global_init(void);"
.br

.RS
This function should be called \fBbefore\fP any other threads are running.
.PP
In a single-threaded application you can skip calling this function and pass
\fBMTD_OPT_GLOBAL_INIT\fP to \fPmtd_init()\fP instead.
.RE

.BI "int mtd_init(unsigned int " flags ", const struct mtd_cfg *" cfg );
.br

.RS
You should call this function once in each thread where libmtdac is to be used.
\fBflags\fP is one or more of the above \fBMTD_OPT_\fP values bitwise-or'd
together and \fBcfg\fP is an optional \fBstruct mtd_cfg\fP, if this is NULL,
then library defaults will be used.
.RE

.BI "void mtd_deinit(void);"
.br

.RS
Performs various cleanup. Should be called when you have finished with the
library.
.RE

.BI "int mtd_init_auth(void);"
.br

.RS
This is used to setup the oauth.json file with the OAuth access token. This
will open the HMRC site in a new browser tab for the user to login and
authorise the library to have access to the required resources.
.RE

.BI "int mtd_init_config(void);"
.br

.RS
This is used to setup the config.json file which contains the client_id &
client_secret.
.RE

.BI "int mtd_init_nino(void);"

.RS
This is for creating the nino.json file which stores the users National
Insurance Number.
.RE

.BI "char *mtd_percent_encode(const char *str, ssize_t len);"

.RS
This is for percent encoding a string.
.RE

.BI "const char *mtd_err2str(int err);"

.RS
This is for getting a textual description of the given error code.
.RE

.BI "const char *mtd_err2enum_str(int err);"

.RS
This is for getting a string version of the given error code enum.
.RE

.SH NOTES

The JSON files mentioned above are stored under \fI~/.config/libmtdac/{prod,test}-api/\fP
