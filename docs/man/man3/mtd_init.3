.\" Automatically generated by Pandoc 3.1.11.1
.\"
.TH "mtd_init" "3" "Jul 23, 2025" "Version 1.3.0" "libmtdac"
.SH NAME
\f[B]mtd_init\f[R] \- per\-instance/thread initialisation
.SH LIBRARY
libmtdac, \f[I]\-lmtdac\f[R]
.SH SYNOPSIS
\f[B]#include <libmtdac/mtd.h>\f[R]
.PP
int mtd_init(unsigned int flags, const struct mtd_cfg *cfg);
.SH DESCRIPTION
This function should be called once in each thread (or program) where
libmtdac is to be used.
.TP
\f[B]flags\f[R]
This is a bitwise OR of one or more of the following
.TP
\f[B]MTD_OPT_LOG_ERR\f[R]
This sets the log level to ERROR (the default)
.TP
\f[B]MTD_OPT_LOG_INFO\f[R]
This sets the log level to INFO
.TP
\f[B]MTD_OPT_LOG_DEBUG_DATA\f[R]
This sets the log level to DEBUG_DATA and will cause JSON payloads to be
logged.
Both those sent and received.
.TP
\f[B]MTD_OPT_LOG_DEBUG_ALL\f[R]
This sets the log level to DEBUG_ALL and as well as the above also
includes curls debug logging.
.TP
\f[B]MTD_OPT_LOG_DEBUG\f[R]
This is an alias for \f[B]MTD_OPT_LOG_DEBUG_ALL\f[R]
.PP
\f[B]At most, only one of the above should be set\f[R]
.TP
\f[B]MTD_OPT_ACT_MOBILE_APP_DIRECT\f[R]
Installed mobile application connecting directly to HMRC
.TP
\f[B]MTD_OPT_ACT_DESKTOP_APP_DIRECT\f[R]
Installed desktop application connecting directly to HMRC
.TP
\f[B]MTD_OPT_ACT_MOBILE_APP_VIA_SERVER\f[R]
Installed mobile application connecting through intermediary servers to
HMRC
.TP
\f[B]MTD_OPT_ACT_DESKTOP_APP_VIA_SERVER\f[R]
Installed desktop application connecting through intermediary servers to
HMRC
.TP
\f[B]MTD_OPT_ACT_WEB_APP_VIA_SERVER\f[R]
Web application connecting through intermediary servers to HMRC
.TP
\f[B]MTD_OPT_ACT_BATCH_PROCESS_DIRECT\f[R]
Batch process connecting directly to HMRC
.TP
\f[B]MTD_OPT_ACT_OTHER_DIRECT\f[R]
The application connects directly to HMRC but the method does not fit
into the architectures described above (the default).
.TP
\f[B]MTD_OPT_ACT_OTHER_VIA_SERVER\f[R]
The application connects through intermediary servers to HMRC but the
method does not fit into the architectures described above.
.RS
.PP
The above \f[B]MTD_OPT_ACT_\f[R] flags specify the application
connection type, this is used by the Fraud Prevention Headers.
.RE
.TP
\f[B]MTD_OPT_GLOBAL_INIT\f[R]
Can be used in a non\-threaded application instead of calling
\f[B]mtd_global_init(3)\f[R]
.TP
\f[B]MTD_OPT_NO_ANTI_FRAUD_HDRS\f[R]
Used to tell libmtdac to \f[I]not\f[R] send \f[I]Fraud Prevention
Headers\f[R].
However these are currently mandatory.
.TP
\f[B]MTD_OPT_SND_EMPTY_HDRS\f[R]
By default, any fraud prevention headers that have no value will not be
sent.
If you wich to send them as empty headers you can set this flag.
.TP
\f[B]cfg\f[R]
is a \f[B]struct mtd_cfg\f[R] that is used to override/provide various
bits of library configuration
.IP
.EX
struct mtd_cfg {
        const struct mtd_fph_ops *fph_ops;
        const char * const *extra_hdrs;

        const char *config_dir;

        const FILE *log_fp;
};
.EE
.PP
\f[B]fph_ops\f[R] is a structure for setting the fraud prevention header
value functions
.IP
.EX
struct mtd_fph_ops {
        char *(*fph_device_id)(void);
        char *(*fph_user)(void);
        char *(*fph_tz)(void);
        char *(*fph_ipaddrs)(void);
        char *(*fph_ipaddrs_ts)(void);
        char *(*fph_macaddrs)(void);
        char *(*fph_srcip)(void);
        char *(*fph_srcip_ts)(void);
        char *(*fph_srcport)(void);
        char *(*fph_screens)(void);
        char *(*fph_window_sz)(void);
        char *(*fph_browser_plugins)(void);
        char *(*fph_browser_js_ua)(void);
        char *(*fph_browser_dnt)(void);
        char *(*fph_vendor_ip)(void);
        char *(*fph_vendor_fwd)(void);
        char *(*fph_ua)(void);
        char *(*fph_multi_factor)(void);
        char *(*fph_license_id)(void);
        char *(*fph_prod_name)(void);
        char *(*fph_version)(void);
        char *(*fph_version_cli)(void);

        void *user_data;
};
.EE
.PP
If the \f[I]fph_ops\f[R] structure or any of its members are
\f[B]NULL\f[R] then the default inbuilt functions are used.
.PP
These functions should return a dynamically allocated buffer that will
be \f[B]free(3)\f[R]\[aq]d by libmtdac.
.PP
\f[I]extra_hdrs\f[R] can be used to send extra HTTP headers, it should
point to a NULL terminated array of character pointers.
.PP
\f[I]config_dir\f[R] should point to a string containing the path to the
configuration directory for this application.
E.g.
\[dq]/home/foo/.config/my\-app\[dq]
.PP
\f[I]log_fp\f[R] can \f[I]optionally\f[R] point to a valid file\-pointer
of an already opened file for writing to have logs sent to.
This doesn\[aq]t affect \f[I]MTD_LOG_ERROR\f[R] logs which are still
sent to \f[I]stderr\f[R].
.SH RETURN VALUE
On success, zero (\f[B]MTD_ERR_NONE\f[R]) is returned.
On error, one of the below errors is returned.
.SH ERRORS
.TP
\f[B]MTD_ERR_OS\f[R]
There was an OS level failure.
.TP
\f[B]MTD_ERR_UNKNOWN_FLAGS\f[R]
One or more of the supplied flags weren\[aq]t recognised.
.TP
\f[B]MTD_ERR_CONFIG_DIR_UNSPEC\f[R]
The config directory was unspecified.
.TP
\f[B]MTD_ERR_CONFIG_DIR_INVALID\f[R]
The specified config directory could not be opened.
.TP
\f[B]MTD_ERR_NO_CONFIG\f[R]
No config was provided.
.SH SEE ALSO
\f[B]libmtdac(3)\f[R], \f[B]libmtdac_mtd.h(3)\f[R],
\f[B]mtd_global_init(3)\f[R], \f[B]mtd_deinit(3)\f[R]
