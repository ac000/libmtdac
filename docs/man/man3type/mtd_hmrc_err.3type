.\" Automatically generated by Pandoc 3.1.11.1
.\"
.TH "mtd_hmrc_err" "3type" "Sep 17, 2025" "Version 1.5.0" "libmtdac"
.SH NAME
\f[B]struct mtd_hmrc_err\f[R] \- linked list of structures containing
the erorrs from a MTD API endpoint.
.SH LIBRARY
libmtdac, \f[I]\-lmtdac\f[R]
.SH SYNOPSIS
\f[B]#include <libmtdac/mtd.h>\f[R]
.IP
.EX
struct mtd_hmrc_err {
        enum mtd_hmrc_error error;
        const char *code;
        const char *msg;
        struct mtd_hmrc_err *next;
};
.EE
.SH DESCRIPTION
This is used to return error from MTD API endpoints.
.PP
It is essentially a linked list of structures allocated by
\f[B]mtd_hrmc_get_error(3)\f[R]
.PP
There will be one structure per error and subsequent structures are
linked via the \f[I]\->next\f[R] member.
.PP
This should be freed by \f[B]mtd_hmrc_free_error(3)\f[R] when finished
with.
.PP
\f[I]error\f[R] is one of the enum mtd_hmrc_error values.
.PP
\f[I]code\f[R] is the string value of the error code as returned by
HMRC.
.PP
\f[I]msg\f[R] is a description of the error.
.PP
\f[I]next\f[R] is either \f[I]NULL\f[R] or a pointer to the next error
structure.
.SH EXAMPLE
General error checking omitted for brevity.
.IP
.EX
#include <stdio.h>
#include <stdlib.h>

#include <libmtdac/mtd.h>

int main(int argc, char *argv[])
{
        static const struct mtd_cfg cfg = {
                .config_dir = \[dq]/home/foo/.config/my\-app\[dq],
        };
        struct mtd_dsrc_ctx dsctx;
        char *buf;
        int err;

        mtd_init(MTD_OPT_GLOBAL_INIT, &cfg);

        dsctx.data_src.file = argv[1];
        dsctx.src_type = MTD_DATA_SRC_FILE;

        err = mtd_ep(MTD_API_EP_BSAS_TRIGGER, &dsctx, &buf, NULL);
        if (err == MTD_ERR_REQUEST) {
                struct mtd_hmrc_err *mhe, *mhep;

                err = mtd_hmrc_get_error(buf, &mhe);
                if (err == MTD_ERR_OS)
                        exit(EXIT_FAILURE);

                for (mhep = mhe; mhep; mhep = mhep\->next)
                        fprintf(stderr, \[dq]ERROR: [%s]: %s\[rs]n\[dq],
                                mhep\->code, mhep\->msg);

                mtd_hmrc_free_error(mhe);
        }

        free(buf);
        mtd_deinit();

        exit(EXIT_SUCCESS);
}
.EE
.SH SEE ALSO
\f[B]libmtdac(3)\f[R], \f[B]libmtdac_mtd.h(3)\f[R],
\f[B]mtd_hmrc_get_error(3)\f[R], \f[B]mtd_hmrc_free_error(3)\f[R]
