.\" Automatically generated by Pandoc 3.1.11.1
.\"
.TH "mtd_dscrx_ctx" "3type" "May 20, 2025" "Version 1.0.0" "libmtdac"
.SH NAME
\f[B]struct mtd_dsrc_ctx\f[R] \- describes the source for the JSON
payload to be sent
.SH LIBRARY
libmtdac, \f[I]\-lmtdac\f[R]
.SH SYNOPSIS
\f[B]#include <libmtdac/mtd.h>\f[R]
.IP
.EX
enum mtd_data_src_type {
        MTD_DATA_SRC_FILE = 0,
        MTD_DATA_SRC_BUF,
        MTD_DATA_SRC_FP,
        MTD_DATA_SRC_FD,
};

typedef union mtd_data_src {
        const void *buf;
        const char *file;
        FILE *fp;
        int fd;
} mtd_data_src_t;

struct mtd_dsrc_ctx {
        mtd_data_src_t data_src;
        size_t data_len;

        enum mtd_data_src_type src_type;
};
.EE
.SH DESCRIPTION
This is used to define the source of the JSON payload data to be sent to
\f[I]POST\f[R]/\f[I]PUT\f[R] endpoints that require a request body.
.PP
You define a \f[I]struct mtd_dsrc_ctx\f[R] and set \f[I]data_src\f[R] to
either a buffer that contains the data, a filename of a file containing
the data, a stdio \f[I]FILE\f[R]* pointer or a file descriptor of an
already opened file containing the data to send.
.PP
You then set \f[I]src_type\f[R] to the appropriate \f[I]enum
mtd_data_src_type\f[R] value.
.PP
In the case of using a buffer you also need to set the length in bytes
of the data in the buffer via \f[I]data_len\f[R].
.SH EXAMPLE
Examples showing the four use cases, error checking omitted for brevity.
.SS Specifying a filename
.IP
.EX
#include <stdio.h>
#include <stdlib.h>

#include <libmtdac/mtd.h>

int main(int argc, char *argv[])
{
        const struct mtd_cfg cfg = {
                .config_dir = \[dq]/home/foo/.config/my\-app\[dq],
        };
        struct mtd_dsrc_ctx dsctx;
        char *buf;

        mtd_init(MTD_OPT_GLOBAL_INIT, &cfg);

        dsctx.data_src.file = argv[1];
        dsctx.src_type = MTD_DATA_SRC_FILE;

        mtd_ep(MTD_API_EP_BSAS_TRIGGER, &dsctx, &buf, NULL);

        printf(\[dq]%s\[rs]n\[dq], buf);

        free(buf);
        mtd_deinit();

        exit(EXIT_SUCCESS);
}
.EE
.SS Using a buffer
.IP
.EX
#include <stdio.h>
#include <stdlib.h>

#include <libmtdac/mtd.h>

int main(void)
{
        const struct mtd_cfg cfg = {
                .config_dir = \[dq]/home/foo/.config/my\-app\[dq],
        };
        struct mtd_dsrc_ctx dsctx;
        char json[1024];
        char *buf;

        mtd_init(MTD_OPT_GLOBAL_INIT, &cfg);

        dsctx.data_len =
                snprintf(json, sizeof(json),
                         \[dq]{\[rs]\[dq]accountingPeriod\[rs]\[dq]: {\[dq]
                         \[dq]\[rs]\[dq]startDate\[rs]\[dq]: \[rs]\[dq]2024\-04\-06\[rs]\[dq],\[dq]
                         \[dq]\[rs]\[dq]endDate\[rs]\[dq]: \[rs]\[dq]2025\-04\-05\[rs]\[dq]},\[dq]
                         \[dq]\[rs]\[dq]typeOfBusiness\[rs]\[dq]: \[rs]\[dq]self\-employment\[rs]\[dq],\[dq]
                         \[dq]\[rs]\[dq]businessId\[rs]\[dq]: \[rs]\[dq]XVIS12345678901\[rs]\[dq]}\[dq]);

        dsctx.data_src.buf = json;
        dsctx.src_type = MTD_DATA_SRC_BUF;

        mtd_ep(MTD_API_EP_BSAS_TRIGGER, &dsctx, &buf, NULL);

        printf(\[dq]%s\[rs]n\[dq], buf);

        free(buf);
        mtd_deinit();

        exit(EXIT_SUCCESS);
}
.EE
.SS Using a FILE *
.IP
.EX
#include <stdio.h>
#include <stdlib.h>

#include <libmtdac/mtd.h>

int main(int argc, char *argv[])
{
        const struct mtd_cfg cfg = {
                .config_dir = \[dq]/home/foo/.config/my\-app\[dq],
        };
        struct mtd_dsrc_ctx dsctx;
        char *buf;

        mtd_init(MTD_OPT_GLOBAL_INIT, &cfg);

        dsctx.data_src.fp = fopen(argv[1], \[dq]re\[dq]);
        dsctx.src_type = MTD_DATA_SRC_FP;

        mtd_ep(MTD_API_EP_BSAS_TRIGGER, &dsctx, &buf, NULL);

        printf(\[dq]%s\[rs]n\[dq], buf);

        fclose(dsctx.data_src.fp);
        free(buf);

        mtd_deinit();

        exit(EXIT_SUCCESS);
}
.EE
.SS Using a file descriptor
.IP
.EX
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

#include <libmtdac/mtd.h>

int main(int argc, char *argv[])
{
        const struct mtd_cfg cfg = {
                .config_dir = \[dq]/home/foo/.config/my\-app\[dq],
        };
        struct mtd_dsrc_ctx dsctx;
        char *buf;

        mtd_init(MTD_OPT_GLOBAL_INIT, &cfg);

        dsctx.data_src.fd = open(argv[1], O_RDONLY);
        dsctx.src_type = MTD_DATA_SRC_FD;

        mtd_ep(MTD_API_EP_BSAS_TRIGGER, &dsctx, &buf, NULL);

        printf(\[dq]%s\[rs]n\[dq], buf);

        close(dsctx.data_src.fd);
        free(buf);

        mtd_deinit();

        exit(EXIT_SUCCESS);
}
.EE
.SH SEE ALSO
\f[B]libmtdac(3)\f[R], \f[B]libmtdac_mtd.h(3)\f[R],
\f[B]libmtdac\-result_buffer(3type)\f[R]
